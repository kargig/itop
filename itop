#!/usr/bin/perl
#
#    Interrupts 'top-like' utility for Linux
#
#    Show the interrupts per second/per IRQ per CPU and TOTAL
#
use IO::File;
use Term::Cap;
use Getopt::Long;
use Pod::Usage;

=head1 SYNOPSIS

    itop [OPTIONS]

=head1 OPTIONS

    -a|--all                 : force display ALL CPUs (caution if you have many CPUs and a narrow screen) + TOTAL
    -c|--cpufilter <string>  : display only specifed CPUs (e.g. 0,1,4-6) + TOTAL
    -f|--filter <string>     : only show interrupts that match on the specified string
    -h|--help                : print this help messages
    -i|--interval <interval> : sample every <interval> seconds. Can be fractional.
    -t|--total               : DON'T display ALL CPUs, just the TOTAL
    -m|--max                 : Show MAX number of interrupts per IRQ

    Default: display ALL CPUs + TOTAL (unless CPUs > 8, then just display the TOTAL)

=cut

sub mycriteria {
    if (($a =~ /(\d+)/) and ($b =~ /(\d+)/)) {
        $a <=> $b;
    } else {
        lc $a cmp lc $b;
    }
}

sub count_cpu {
    my $r = 0;
    for (@_) {
        $r++ if ($_);
    }
    return $r;
}

sub make_cpumap {
    my ($spec, $maxcpu) = @_;
    my @cpuset = ();
    my $last;
    my $range = 0;

    while ($spec =~ /^([0-9]+|,|-)/) {
        if ($1 eq ',') {
            if (defined ($last)) {
                push @cpuset, $last;
                $last = undef;
            }
            $range = 0;
        } elsif ($1 eq '-') {
            $range = 1;
        } elsif ($range) {
            $range = 0;
            for ((defined ($last)? $last: 0)..$1) {
                push @cpuset, $_;
            }
            $last = undef;
        } else {
            $last = $1;
        }
        $spec = $';
    }

    if ($range) {
        for ((defined ($last)? $last: 0)..$maxcpu) {
            push @cpuset, $_;
        }
    } elsif (defined ($last)) {
        push @cpuset, $last;
    }

    my @cpumap;
    foreach (sort {$a <=> $b} @cpuset) {
        @cpumap[$_] = 1 if ($_ <= $maxcpu);
    }
    return @cpumap;
}

# Command line argument processing
my $DISPLAYALL='';
my $DISPLAYTOTAL='';
my $DISPLAYMAX='';
# filter MUST have a space or by default we get nothing
my $FILTER=' ';
my $INTERVAL = 1.0;
my $CPUFILTER = '';
GetOptions('all' => \$DISPLAYALL,
       'total' => \$DISPLAYTOTAL,
       'max' => \$DISPLAYMAX,
       'filter=s' => \$FILTER,
       'interval=f' => \$INTERVAL,
       'cpufilter=s' => \$CPUFILTER,
       'help' => \my $help) or pod2usage(0);
pod2usage(1) if $help;

if (($DISPLAYALL eq 1) and ($DISPLAYTOTAL eq 1)) {
    die "Invalid options: cannot use both -t and -a.\n";
}


$term = Tgetent Term::Cap;
print $term->Tputs('cl');

$fh = new IO::File;

if (!$fh->open("</proc/interrupts")) {
    die "Unable to open /proc/interrupts";
}

$top = $fh->getpos();
$first_time = 0;
my $expand=0;
my @cpumap;
while (1) {
    $expand=0;
    $fh->setpos($top);

    # Read and parse interrupts
    $header = <$fh>; # Header line
    # Count CPUs
    $cpus = () = $header =~ /CPU/g;

    if ($CPUFILTER ne '') {
        @cpumap = make_cpumap ($CPUFILTER, $cpus - 1);
    } elsif (($DISPLAYALL eq 1) or ($cpus < 9 and $DISPLAYTOTAL != 1)) {
        @cpumap = make_cpumap ("-", $cpus - 1);
    } elsif (($DISPLAYTOTAL eq 1) or ($cpus > 8)) {
        @cpumap = make_cpumap ("", $cpus - 1);
    }

    my %irqs;
PARSE:  while (<$fh>) {
        next PARSE if !/$FILTER/;
        my @array = split(' ',$_);
        $irq = $array[0];
        chop($irq);
        for ($cpu = 0; $cpu < $cpus; $cpu++) {
            $icount = $array[$cpu+1];
            $irqs{$irq}[$cpu] = $icount;
        }
        if (@array[-1] =~ /_hcd:/) {
            $item = @array[-1];
            # remove '_hcd' from usb names
            $item =~ s/_hcd//;
            $item =~ tr/,//d;
            $irq_device{$irq}=$item;
        } else {
            $irq_device{$irq} = @array[-1];
        }
        # check if there more devices sharing the same IRQ
        @revarray = reverse(@array);
        foreach $item (@revarray[1..4]) {
            if ($item =~ /,/) {
                # remove '_hcd' from usb names
                if ($item =~ /hci_hcd:/) {
                    $item =~ s/_hcd//;
                    $item =~ tr/,//d;
                    $irq_device{$irq}=$item.",".$irq_device{$irq};
                }
            }
            # Find biggest irq_device name
            $cur_expand=length($irq_device{$irq});
            if ($cur_expand > $expand) {
                $expand = $cur_expand;
            }
        }
    }

    if ($first_time != 0) {
        # Prepare sceeen
        print $term->Tputs('ho');
        # Output header
        $cols=10+$expand;
        $cols2=4+$expand;
        printf("%${cols}s%". (count_cpu(@cpumap) + 1) * 10 . "s", "", "IRQs/Second\n");
        printf("%${cols2}s (%3s)  ", "Device", "IRQ");
        foreach ($cpu = 0; $cpu < $cpus; $cpu++) {
            printf('%9s ', 'CPU' . $cpu) if (@cpumap[$cpu]);
        }
        printf("%9s", "TOTAL");
        if ($DISPLAYMAX ne '') {
            printf("%9s\n", "MAX");
        } else {
            printf("\n");
        }
        foreach $irq (sort mycriteria keys %irqs) {
            printf("%${cols2}s (%3s): ", substr($irq_device{$irq}, 0, $cols2), $irq);
            $total = 0;
            for ($cpu = 0; $cpu < $cpus; $cpu++) {
                printf("%9.0f ", ($irqs{$irq}[$cpu] - $last{$irq}[$cpu]) / $INTERVAL) if (@cpumap[$cpu]);
                $total += $irqs{$irq}[$cpu] - $last{$irq}[$cpu];
                if ($DISPLAYMAX ne '') {
                    if ($total > $max{$irq}) {
                        $max{$irq} = $total
                    }
                }
            }
            printf("%9.0f", $total / $INTERVAL);
            if ($DISPLAYMAX ne '') {
                printf("%9.0f\n", $max{$irq});
            } else {
                printf("\n");
            }
        }
    }
    $first_time = 1;


    %last = %irqs;
    select undef, undef, undef, $INTERVAL;
}
